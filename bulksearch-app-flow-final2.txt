In a Spring Boot starter project, the `autoconfiguration` classes are the ones that provide beans and configurations automatically when the starter is added as a dependency to another project. 

The `spring.factories` file located in `src/main/resources/META-INF/` is used by Spring Boot to find these auto-configuration classes during the application startup. 

Given your project setup:

### 1. **filejobstarter**:

If this starter is responsible for setting up Kafka listeners, job launchers, and other related beans, you'll have an auto-configuration class that looks something like:

```java
@Configuration
public class FileJobAutoConfiguration {

    @Bean
    public JobLauncher jobLauncher(JobRepository jobRepository) {
        SimpleJobLauncher jobLauncher = new SimpleJobLauncher();
        jobLauncher.setJobRepository(jobRepository);
        return jobLauncher;
    }

    // ... other beans and configurations ...
}
```

### 2. **opensearchfilejobstarter**:

For this starter, the auto-configuration class will set up beans related to OpenSearch interactions:

```java
@Configuration
public class OpenSearchAutoConfiguration {

    @Bean
    @ConditionalOnMissingBean
    public RestHighLevelClient restHighLevelClient() {
        // Setup and return a RestHighLevelClient for OpenSearch
    }

    // ... other beans and configurations ...
}
```

### Then, in `spring.factories` for each starter:

For **filejobstarter**:

```properties
org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.yourpackage.filejobstarter.FileJobAutoConfiguration
```

For **opensearchfilejobstarter**:

```properties
org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.yourpackage.opensearchfilejobstarter.OpenSearchAutoConfiguration
```

When another Spring Boot application adds either of these starters as dependencies and starts up, Spring Boot checks the `spring.factories` file in each starter, finds the specified auto-configuration classes, and automatically applies their configurations.

Remember, auto-configuration classes should be crafted carefully, with conditions to check if beans should or shouldn't be created, to ensure they play nicely with the broader application context and don't cause unintended bean overwrites or conflicts. Using annotations like `@ConditionalOnMissingBean`, `@ConditionalOnClass`, and others provided by Spring Boot can help create smart auto-configurations that adapt based on the context they are in.